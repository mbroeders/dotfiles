#+TITLE: Emacs EXWM Desktop Environment
#+PROPERTY: header-args :tangle "./.emacs.d/desktop.el"

* Window Management
** EXWM Configuration

#+begin_src emacs-lisp

(defun efs/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

;(defun efs/set-wallpaper ()
;  (interactive)
;  ;; NOTE: You will need to update this to a valid background path!
;  (start-process-shell-command
;      "feh" nil  "feh --bg-scale /usr/share/backgrounds/matt-mcnulty-nyc-2nd-ave.jpg"))

(defun efs/exwm-init-hook ()
  ;; Make workspace 1 be the one where we land at startup
  (exwm-workspace-switch-create 1)

  ;; Open eshell by default
  ;; (eshell)
  (efs/start-panel)
  ;; When using laptop: 
  ;; - Show battery status in the mode line
  ;; - Start nm-applet
  (when (string= (system-name) "void-laptop")  
  ;  (display-battery-mode 1)
    ; (efs/run-in-background "nm-applet")
    ; (efs/run-in-background "blueman-applet")
    )

  ;; Show the time and date in modeline
  ;(setq display-time-day-and-date t)
  ;(display-time-mode 1)
  ;; Also take a look at display-time-format and format-time-string

  ;; Launch apps that will run in the background
  ;(efs/run-in-background "pasystray")
  ;(efs/run-in-background "blueman-applet")
  )

(defun mb/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(defun mb/setup-window-by-class ()
      (interactive)
      (pcase exwm-class-name
        ("qutebrowser" (exwm-workspace-move-window 2))))

(defvar efs/polybar-process nil
  "Holds the process of the running Polybar instance, if any")

(defun efs/kill-panel ()
  (interactive)
  (when efs/polybar-process
    (ignore-errors
      (kill-process efs/polybar-process)))
  (setq efs/polybar-process nil))

(defun efs/start-panel ()
  (interactive)
  (efs/kill-panel)
  (when (string= (system-name) "void-laptop") 
    (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel-laptop")))
  (when (string= (system-name) "void-pc") 
    (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel-desktop"))))

(defun efs/send-polybar-hook (module-name hook-index)
  (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

(defun efs/send-polybar-exwm-workspace ()
  (efs/send-polybar-hook "exwm-workspace" 1))

(use-package exwm
  :config
  ;; Set the default number of workspaces
  (setq exwm-workspace-number 5)
  
  ;; Customizing buffer name based on window title
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (pcase exwm-class-name
                ("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
                ("qutebrowser" (exwm-workspace-rename-buffer (format "qb: %s" exwm-title))))))

  ;; Manipulate windows as they're created
    (add-hook 'exwm-manage-finish-hook
              (lambda ()
                ;; Send the window where it belongs
                (mb/setup-window-by-class)))

  ;; Hide the modeline on all X windows
  (add-hook 'exwm-floating-setup-hook
              (lambda ()
                (exwm-layout-hide-mode-line)))

  ;; When window "class" updates, use it to set the buffer name
  (add-hook 'exwm-update-class-hook #'mb/exwm-update-class)

  ;; When EXWM starts up, do some extra confifuration
  (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)
  
  ;; Rebind CapsLock to Ctrl
  (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")
 
  ;; NOTE: Uncomment this option if you want to detach the minibuffer!
  ;; Detach the minibuffer (show it with exwm-workspace-toggle-minibuffer)
  ;; (setq exwm-workspace-minibuffer-position 'top)
  
;; Set the screen resolution (update this to be the correct resolution for your screen!)
  (require 'exwm-randr)
  (exwm-randr-enable)
  ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")
  (when (string= (system-name) "void-laptop")
    (start-process-shell-command "xrandr" nil "xrandr --output eDP-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI-1 --off"))

  ;; NOT NECESSARY BECAUSE POLYBAR
  ;; Load the system tray before exwm-init
  ;; (require 'exwm-systemtray)
  ;;(exwm-systemtray-enable)
  ;;(setq exwm-systemtray-height 32)

  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\M-j  ;; Buffer list
          ?\C-\ ))  ;; Ctrl+Space

  ;; Ctrl+Q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)
          ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

    (defun exwm/run-qute ()
      (efs/run-in-background "qutebrowser")
      (exwm-workspace-switch-create 2))
    
    (defun exwm/bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (funcall ',invocation)))
      (setq key (pop bindings)
            invocation (pop bindings))))
    
    (exwm/bind-function
      "s-o" 'exwm/run-qute
      "s-q" 'kill-buffer)

  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
  (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)

  (exwm-enable))

(use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

* Applications
** Browsers
*** Qutebrowser
Basic Configuration
#+begin_src python :tangle ".config/qutebrowser/config.py" :mkdirp yes

# Open every tab as a new window, Vimb style
# Especially useful when using EXWM; however, now not so much
c.tabs.tabs_are_windows = True
c.tabs.show = "multiple"
c.tabs.last_close = "close"

c.auto_save.session = True
c.scrolling.smooth = True
c.session.lazy_restore = True
c.content.autoplay = False

# Scale pages and UI better for hidpi
# c.zoom.default = "<<get-setting(name="qutebrowser/default-zoom")>>%"
c.fonts.hints = "bold 12pt monospace" #20

# Better default fonts
c.fonts.web.family.standard = "BitstreamVeraSansMono Nerd Font"
c.fonts.web.family.serif = "Bitstream Vera Serif"
c.fonts.web.family.sans_serif = "Bitstream Vera Sans"
c.fonts.web.family.fixed = "Fira Mono"
c.fonts.statusbar = "12pt Cantarell"

# Use dark mode where possible
# c.colors.webpage.darkmode.enabled = True
# c.colors.webpage.bg = "black"

# Automatically turn on insert mode when a loaded page focuses a text field
c.input.insert_mode.auto_load = True

# Edit fields in Emacs with Ctrl+E
c.editor.command = ["emacsclient", "+{line}:{column}", "{file}"]

# Make Ctrl+g quit everything like in Emacs
config.bind('<Ctrl-g>', 'leave-mode', mode='insert')
config.bind('<Ctrl-g>', 'leave-mode', mode='command')
config.bind('<Ctrl-g>', 'leave-mode', mode='prompt')
config.bind('<Ctrl-g>', 'leave-mode', mode='hint')
# config.bind('v', 'spawn ~/.dotfiles/bin/umpv {url}')
# config.bind('V', 'hint links spawn ~/.dotfiles/bin/umpv {hint-url}')

# Tweak some keybindings
# config.unbind('d') # Don't close window on lower-case 'd'
config.bind('yy', 'yank')

# Vim-style movement keys in command mode
config.bind('<Ctrl-j>', 'completion-item-focus --history next', mode='command')
config.bind('<Ctrl-k>', 'completion-item-focus --history prev', mode='command')

config.load_autoconfig(False)

# Startpage
# c.url.default_page = 'http://schauderbasis.de'
# c.url.start_pages = 'http://schauderbasis.de'

# Search Machines
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}',
                       'g': 'https://google.com/search?q={}',
                       'r': 'https://reddit.com/r/{}',
                       "osm": "https://www.openstreetmap.org/search?query={}",
}

# More binding hints here: https://gitlab.com/Kaligule/qutebrowser-emacs-config/blob/master/config.py

#+end_src

Quickmarks
#+begin_src conf :tangle ".config/qutebrowser/quickmarks"

gg https://www.google.com
nos https://www.nos.nl
fm https://www.nederland.fm
efs https://github.com/daviwil/emacs-from-scratch
sp https://open.spotify.com/
na http://192.168.178.53:5000

#+end_src
** Polybar
*** Basic settings

#+begin_src conf :tangle "~/.dotfiles/.config/polybar/config" :mkdirp yes

; Docs: https://github.com/polybar/polybar
;==========================================================

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 2

[colors]
background = #f0232635
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea

#+end_src

*** Laptop Config
#+begin_src conf :tangle "~/.dotfiles/.config/polybar/config" :mkdirp yes

[bar/panel-laptop]
width = 100%
height = 25
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=10:weight=bold;2"
font-1 = "Font Awesome:size=8;2"
font-2 = "Material Icons:size=10;5"
font-s= "Fira Mono:size=12;5"

modules-left = exwm-workspace
modules-right = wireless-network temperature battery date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize
#+end_src

*** Desktop Config
#+begin_src conf :tangle "~/.dotfiles/.config/polybar/config" :mkdirp yes

[bar/panel-desktop]
width = 100%
height = 30
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=10:weight=bold;2"
font-1 = "Font Awesome:size=8;2"
font-2 = "Material Icons:size=10;5"
font-3 = "Fira Mono:size=15;5"

modules-left = exwm-workspace
modules-right = wired-network cpu memory date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize
#+end_src

*** Polybar Modules
#+begin_src conf :tangle "~/.dotfiles/.config/polybar/config" :mkdirp yes
[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-padding = 1

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = %percentage%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/date]
type = internal/date
interval = 5

date = "%a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

label = %date% %time%

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%% / %time%
format-charging = <animation-charging> <label-charging>
format-charging-underline = ${colors.underline-1}

label-discharging = %percentage%% / %time%
format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full = <ramp-capacity> <label-full>
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-underline = ${colors.underline-1}
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}

[module/memory]
type = internal/memory

; Seconds to sleep between updates
; Default: 1
interval = 3

format =  <label> <ramp-used>
label = %gb_used%/%gb_total%
format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

; Only applies if <ramp-used> is used
ramp-used-0 = ▁
ramp-used-1 = ▂
ramp-used-2 = ▃
ramp-used-3 = ▄
ramp-used-4 = ▅
ramp-used-5 = ▆
ramp-used-6 = ▇
ramp-used-7 = █

[module/wireless-network]
type = internal/network
interface = wlo1

; Seconds to sleep between updates
; Default: 1
interval = 3.0

; Available tags:
;   <label-connected> (default)
;   <ramp-signal>
format-connected = <label-connected>

; Available tags:
;   <label-disconnected> (default)
format-disconnected = <label-disconnected>

; Available tags:
;   <label-connected> (default)
;   <label-packetloss>
;   <animation-packetloss>
; format-packetloss = <animation-packetloss> <label-connected>

; All labels support the following tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]

; Default: %ifname% %local_ip%
label-connected =  %essid% %signal%
format-connected-underline = ${colors.underline-1}
; label-connected-foreground = #eefafafa

; Default: (none)
label-disconnected = not connected
format-disconnected-underline = ${colors.underline-1}
;label-disconnected-foreground = #66ffffff

[module/wired-network]
type = internal/network
interface = enp4s0

; Seconds to sleep between updates
; Default: 1
interval = 3.0

; Available tags:
;   <label-connected> (default)
;   <ramp-signal>
format-connected = <label-connected>

; Available tags:
;   <label-disconnected> (default)
format-disconnected = <label-disconnected>

; Available tags:
;   <label-connected> (default)
;   <label-packetloss>
;   <animation-packetloss>
; format-packetloss = <animation-packetloss> <label-connected>

; All labels support the following tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]

; Default: %ifname% %local_ip%
label-connected =  %local_ip% %linkspeed%
format-connected-underline = ${colors.underline-1}
; label-connected-foreground = #eefafafa

; Default: (none)
label-disconnected = not connected
format-disconnected-underline = ${colors.underline-1}
;label-disconnected-foreground = #66ffffff



#+end_src
