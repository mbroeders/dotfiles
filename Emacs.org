#+TITLE: Emacs Configuration File
#+PROPERTY: header-args :tangle "./.emacs.d/init.el"

* Startup Performance

#+begin_src emacs-lisp

;; See Tweaking the Garbage Collector: This HIGH value only during start of init!!
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun mb/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'mb/display-startup-time)

;; Start server
(server-start)

#+end_src

* System UI
** Basic UI Configuration

#+begin_src emacs-lisp

;; You will most likely need to adjust this font size for your system!
(defvar mb/default-font-size 120)

(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		 org-agenda-mode-hook
               term-mode-hook
               shell-mode-hook
               eshell-mode-hook
               vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp

;; Set default font face
(set-face-attribute 'default nil :font "Fira Code" :height mb/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 130)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 140 :weight 'regular)

#+end_src

** Saving Customizations

#+begin_src emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

#+end_src

* Package System Setup

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

** No Littering Package (needs to be loaded early)

#+begin_src emacs-lisp

(use-package no-littering)
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Automatic Package Updates

There’s a useful package called *auto-package-update* which will help you configure Emacs to automatically upgrade your packages on a regular basis!
Of course, this may come with downsides, but we'll see...

https://github.com/rranelli/auto-package-update.el

#+begin_src emacs-lisp

(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

#+end_src

* Keybinding Configuration

#+begin_src emacs-lisp

(use-package general
  :config
  (general-create-definer mb/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (mb/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

** ESC Cancels All

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Rebind C-u

Since I let evil-mode take over C-u for buffer scrolling, I need to rebind the universal-argument command to another key sequence.

#+begin_src emacs-lisp

(global-set-key (kbd "C-M-u") 'universal-argument)

#+end_src

* UI Configuration
** Color Theme

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme `doom-palenight t)) ;doom-dracula is a good alternative

#+end_src

** Better Modeline

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 12)))

#+end_src

** Which Key

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

** Ivy And Counsel

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :after ivy
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-j" . counsel-switch-buffer)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

#+end_src

*** Improved Candidate Sorting with prescient.el (TODO)

#+begin_src emacs-lisp

(use-package prescient
  :after counsel
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after prescient
  :config
  (ivy-prescient-mode 1))

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

#+begin_src emacs-lisp

(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(mb/leader-keys
 "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* Org Mode
** Better Font Faces

#+begin_src emacs-lisp

(defun mb/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
    '(("^ *\\([-]\\) "
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
    (org-level-2 . 1.1)
    (org-level-3 . 1.05)
    (org-level-4 . 1.0)
    (org-level-5 . 1.1)
    (org-level-6 . 1.1)
    (org-level-7 . 1.1)
    (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

#+begin_src emacs-lisp

(defun mb/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

(use-package org
    :hook (org-mode . mb/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-files
    '("~/documents/org/gtd/inbox.org"
      "~/documents/org/gtd/agenda.org"
      "~/documents/org/gtd/projects.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "CANCELLED(c@/!" "|" "DONE(d!)")
    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
    '(("../general_archive.org" :maxlevel . 1)
    ("../general_tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
    '((:startgroup)
    ; Put mutually exclusive tags here
    (:endgroup)
    ("@errand" . ?E)
    ("@home" . ?H)
    ("@work" . ?W)
    ("agenda" . ?a)
    ("planning" . ?p)
    ("publish" . ?P)
    ("batch" . ?b)
    ("note" . ?n)
    ("idea" . ?i)))

    (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))
    (define-key global-map (kbd "C-c c")
    (lambda () (interactive) (org-capture nil)))
    (define-key global-map (kbd "C-c a")
    (lambda () (interactive) (org-agenda nil)))

    (mb/org-font-setup))

    #+end_src
**** Custom Agenda Views

#+begin_src emacs-lisp

;; Configure custom agenda views
(setq org-agenda-custom-commands
'(("d" "Dashboard"
((agenda "" ((org-deadline-warning-days 7)))
(todo "NEXT"
((org-agenda-overriding-header "Next Tasks")))
(tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

("n" "Next Tasks"
((todo "NEXT"
((org-agenda-overriding-header "Next Tasks")))))

("W" "Work Tasks" tags-todo "+work-email")

;; Low-effort next actions
("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
((org-agenda-overriding-header "Low Effort Tasks")
(org-agenda-max-todos 20)
(org-agenda-files org-agenda-files)))

("w" "Workflow Status"
((todo "WAIT"
((org-agenda-overriding-header "Waiting on External")
(org-agenda-files org-agenda-files)))
(todo "REVIEW"
((org-agenda-overriding-header "In Review")
(org-agenda-files org-agenda-files)))
(todo "PLAN"
((org-agenda-overriding-header "In Planning")
(org-agenda-todo-list-sublevels nil)
(org-agenda-files org-agenda-files)))
(todo "BACKLOG"
((org-agenda-overriding-header "Project Backlog")
(org-agenda-todo-list-sublevels nil)
(org-agenda-files org-agenda-files)))
(todo "READY"
((org-agenda-overriding-header "Ready for Work")
(org-agenda-files org-agenda-files)))
(todo "ACTIVE"
((org-agenda-overriding-header "Active Projects")
(org-agenda-files org-agenda-files)))
(todo "COMPLETED"
((org-agenda-overriding-header "Completed Projects")
(org-agenda-files org-agenda-files)))
(todo "CANC"
((org-agenda-overriding-header "Cancelled Projects")
(org-agenda-files org-agenda-files)))))))
#+end_src

**** Capture Templates

#+begin_src emacs-lisp

(setq org-capture-templates
`(("t" "Tasks / Projects")
("tt" "Task" entry (file+olp "~/documents/org/gtd/inbox.org" "Tasks")
"* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

("j" "Journal Entries")
("jj" "Journal" entry
(file+olp+datetree "~/documents/org/gtd/journal.org")
"\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
:clock-in :clock-resume
:empty-lines 1)
("jm" "Meeting" entry
(file+olp+datetree "~/documents/org/gtd/journal.org")
"* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
:clock-in :clock-resume
:empty-lines 1)

("w" "Workflows")
("we" "Checking Email" entry (file+olp+datetree "~/documents/org/gtd/journal.org")
"* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

("m" "Metrics Capture")
("mw" "Weight" table-line (file+headline "~/documents/org/gtd/metrics.org" "Weight")
"| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)

("m" "Email Workflow")
("mf" "Follow Up" entry (file+headline "~/documents/org/gtd/inbox.org" "Follow-up")
    "* TODO Follow up with %:fromname on %:subject\n%a\n\n%i")
("mr" "Read Later" entry (file+headline "~/documents/org/gtd/inbox.org" "Read Later")
    "* TODO Read %:subject\n%a\n\n%i")

("h" "Hobbies")
("hb" "Book entry" entry (file+headline "~/documents/org/gtd/books.org" "2021")
"* %^{prompt|TODO|READING|DONE} %^{Title}\n:PROPERTIES:\n:author: %?\n:END:\n" :prepend t :empty-lines-after 1)))

#+end_src

**** Nice Header Bullets

#+begin_src emacs-lisp

(use-package org-bullets
:after org
:hook (org-mode . org-bullets-mode)
:custom
(org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

**** Center Org Buffers

#+begin_src emacs-lisp

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 125
    visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

(with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Auto Tangle Configuration File 

#+begin_src emacs-lisp

(defun mb/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/.dotfiles/"))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
            (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mb/org-babel-tangle-config)))

#+end_src

** Sync Google Calendar

#+begin_src emacs-lisp

(use-package org-gcal
    :config
        (require 'org-gcal)
        (setq org-gcal-client-id "657985220157-lfv9u226bbna5rgprfovea1cm49eogbt.apps.googleusercontent.com"
                org-gcal-client-secret "bKdOOHoME7zHhKz2woHfj01H"
                org-gcal-fetch-file-alist '(("mbroeders@gmail.com" .  "~/documents/org/gtd/agenda.org")
                                            ("family08361847864604318057@group.calendar.google.com" .  "~/documents/org/gtd/agenda.org"))))
    
#+end_src

* Mail

Let's start with some basic information

#+begin_src emacs-lisp

(setq user-full-name "Mark Broeders"
      user-mail-address "mail@markbroeders.nl")

#+end_src

** Mu4e

TODO - reorganize this file!!

#+begin_src emacs-lisp

(use-package pinentry)
(use-package mu4e
  :ensure nil
  :config
    
    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    (setq mu4e-sent-folder   "/Sent")       ;; folder for sent messages
    (setq mu4e-drafts-folder "/drafts")     ;; unfinished messages
    (setq mu4e-trash-folder  "/Trash")      ;; trashed messages
    (setq mu4e-refile-folder "/Archive")   ;; saved messages

    (setq mu4e-get-mail-command (format "INSIDE_EMACS=%s mbsync -a" emacs-version)
        epg-pinentry-mode 'ask)
    (pinentry-start)

    (setq
    message-send-mail-function   'smtpmail-send-it
    smtpmail-default-smtp-server "mail.mijndomein.nl"
    smtpmail-smtp-server         "mail.mijndomein.nl"
    smtpmail-stream-type          'starttls
    smtpmail-smtp-service 587
    )

    (setq user-full-name "Mark Broeders"))

#+end_src

* Development
** Projectile

Easy project management with Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/development/code")
    (setq projectile-project-search-path '("~/development/code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
* File Management
** Dired

Set up basic configuration and the superhandy keybinding 'C-x C-j' to //jump// to the directory of the file your viewing

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))

#+end_src

*** Icons
#+begin_src emacs-lisp

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

*** Hide Dotfiles
#+begin_src emacs-lisp

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

* Packages
** Radio / Media Player

[[https://github.com/fossegrim/eradio][Eradio]] is a simple Internet radio player for Emacs. It uses either vlc or mpv as backend.

#+begin_src emacs-lisp

(use-package eradio
  :ensure t
  :config
    (setq eradio-player '("mpv" "--no-video" "--no-terminal"))

    (global-set-key (kbd "C-c r p") 'eradio-play)
    (global-set-key (kbd "C-c r s") 'eradio-stop)
    (global-set-key (kbd "C-c r t") 'eradio-toggle)

    (setq eradio-channels '(("radio 1 - nieuws"  . "https://icecast.omroep.nl/radio1-bb-mp3")
                            ("metal - soma fm"   . "https://somafm.com/metal130.pls")           ;; \m/
                            ("cyberia - lainon"  . "https://lainon.life/radio/cyberia.ogg.m3u") ;; cyberpunk-esque electronica
                            ("cafe - lainon"     . "https://lainon.life/radio/cafe.ogg.m3u"))))  ;; boring ambient, but with lain

#+end_src
** Analyze Startup

Benchmark Emacs Startup time without ever leaving your Emacs. For this we use a package called [[https://github.com/jschaf/esup/][esup]].
To start Esup, run 'M-x esup', and watch the magic happen. By default, Esup will profile user-init-file. 
To profile a custom file, call esup with a prefix argument. That is, 'C-u M-x' esup.

#+begin_src emacs-lisp

(use-package esup
  :ensure t
  ;; To use MELPA Stable use ":pin melpa-stable",
  :pin melpa)

;; Possible work around for bug
;; see: https://github.com/jschaf/esup/issues/54
(setq esup-depth 0)

#+end_src

* Window Management
** Window History (and undo) with winner mode
#+begin_src emacs-lisp
(use-package winner
  :after evil
  :config
  (winner-mode)
  (define-key evil-window-map "u" 'winner-undo)
  (define-key evil-window-map "U" 'winner-redo))
#+end_src

* Terminal

#+begin_src emacs-lisp

(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;(setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))

#+end_src

* Tweaking the garbage collector

One other common performance trick is to reduce the number of times the garbage collector will run during the startup process.
Set the gc-cons-threshold high at the beginning of your init.el and bring it back down at the end of your init.el.

#+begin_src emacs-lisp

;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))

#+end_src

